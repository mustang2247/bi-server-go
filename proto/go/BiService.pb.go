// Code generated by protoc-gen-go. DO NOT EDIT.
// source: BiService.proto

package BiService

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

func init() { proto.RegisterFile("BiService.proto", fileDescriptor_0f0d556458b9f427) }

var fileDescriptor_0f0d556458b9f427 = []byte{
	// 211 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x77, 0xca, 0x0c, 0x4e,
	0x2d, 0x2a, 0xcb, 0x4c, 0x4e, 0xd5, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x84, 0x0b, 0x48,
	0xf1, 0x38, 0xe7, 0xe7, 0xe6, 0xe6, 0xe7, 0x41, 0x24, 0x8c, 0xe6, 0xb0, 0x72, 0x21, 0xe4, 0x84,
	0x1c, 0xb8, 0xd8, 0x3d, 0xf3, 0x8a, 0x4b, 0x12, 0x73, 0x72, 0x84, 0x24, 0xf4, 0x10, 0x66, 0x40,
	0x74, 0x04, 0xa5, 0x16, 0x96, 0xa6, 0x16, 0x97, 0x48, 0x49, 0x62, 0x91, 0x29, 0x2e, 0xc8, 0xcf,
	0x2b, 0x4e, 0x55, 0x62, 0x00, 0x99, 0x10, 0x5c, 0x92, 0x58, 0x54, 0x12, 0x5a, 0x40, 0xae, 0x09,
	0x8e, 0x5c, 0x1c, 0x41, 0xa9, 0xe9, 0x99, 0xc5, 0x25, 0xa9, 0x45, 0xe4, 0x1a, 0x61, 0xc7, 0xc5,
	0xea, 0x93, 0x9f, 0x9e, 0x99, 0x47, 0x81, 0x27, 0x02, 0x12, 0x2b, 0x73, 0x53, 0xf3, 0x4a, 0x28,
	0x30, 0xc1, 0x35, 0x39, 0x3f, 0x2f, 0x3f, 0xb7, 0x92, 0x02, 0x13, 0x1c, 0x53, 0x52, 0x42, 0x8b,
	0x29, 0x0a, 0x85, 0x40, 0x90, 0x2a, 0x0a, 0xf4, 0xbb, 0x96, 0x51, 0x10, 0x06, 0x4e, 0x5c, 0x9c,
	0x1e, 0xa9, 0x89, 0x45, 0x25, 0x49, 0xa9, 0x89, 0xe4, 0x9a, 0xe1, 0x24, 0xcf, 0x25, 0x90, 0x9c,
	0x9f, 0xab, 0x97, 0x94, 0xa9, 0x97, 0x94, 0x59, 0x0c, 0x51, 0xe4, 0x84, 0x48, 0xaf, 0x01, 0x8c,
	0x49, 0x6c, 0xe0, 0x64, 0x6c, 0x0c, 0x08, 0x00, 0x00, 0xff, 0xff, 0xdc, 0xa3, 0x22, 0x78, 0xf2,
	0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// BiServiceClient is the client API for BiService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type BiServiceClient interface {
	// 安装 只能报送一次
	Install(ctx context.Context, in *CommonRequest, opts ...grpc.CallOption) (*CommonResponse, error)
	// 启动 打开应用
	StartUp(ctx context.Context, in *CommonRequest, opts ...grpc.CallOption) (*CommonResponse, error)
	// 注册
	Register(ctx context.Context, in *CommonRequest, opts ...grpc.CallOption) (*CommonResponse, error)
	// 登陆
	Login(ctx context.Context, in *CommonRequest, opts ...grpc.CallOption) (*CommonResponse, error)
	// 支付
	Payment(ctx context.Context, in *CommonRequest, opts ...grpc.CallOption) (*CommonResponse, error)
	// 虚拟交易 经济系统
	Economy(ctx context.Context, in *CommonRequest, opts ...grpc.CallOption) (*CommonResponse, error)
	// 添加用户
	AddUser(ctx context.Context, in *CommonRequest, opts ...grpc.CallOption) (*CommonResponse, error)
	// 任务及副本系统
	Quest(ctx context.Context, in *CommonRequest, opts ...grpc.CallOption) (*CommonResponse, error)
	// 自定义 处理 表等
	Event(ctx context.Context, in *CommonRequest, opts ...grpc.CallOption) (*CommonResponse, error)
	// 心跳 在线统计
	Heartbeat(ctx context.Context, in *CommonRequest, opts ...grpc.CallOption) (*CommonResponse, error)
}

type biServiceClient struct {
	cc *grpc.ClientConn
}

func NewBiServiceClient(cc *grpc.ClientConn) BiServiceClient {
	return &biServiceClient{cc}
}

func (c *biServiceClient) Install(ctx context.Context, in *CommonRequest, opts ...grpc.CallOption) (*CommonResponse, error) {
	out := new(CommonResponse)
	err := c.cc.Invoke(ctx, "/BiService.BiService/Install", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *biServiceClient) StartUp(ctx context.Context, in *CommonRequest, opts ...grpc.CallOption) (*CommonResponse, error) {
	out := new(CommonResponse)
	err := c.cc.Invoke(ctx, "/BiService.BiService/StartUp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *biServiceClient) Register(ctx context.Context, in *CommonRequest, opts ...grpc.CallOption) (*CommonResponse, error) {
	out := new(CommonResponse)
	err := c.cc.Invoke(ctx, "/BiService.BiService/Register", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *biServiceClient) Login(ctx context.Context, in *CommonRequest, opts ...grpc.CallOption) (*CommonResponse, error) {
	out := new(CommonResponse)
	err := c.cc.Invoke(ctx, "/BiService.BiService/Login", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *biServiceClient) Payment(ctx context.Context, in *CommonRequest, opts ...grpc.CallOption) (*CommonResponse, error) {
	out := new(CommonResponse)
	err := c.cc.Invoke(ctx, "/BiService.BiService/Payment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *biServiceClient) Economy(ctx context.Context, in *CommonRequest, opts ...grpc.CallOption) (*CommonResponse, error) {
	out := new(CommonResponse)
	err := c.cc.Invoke(ctx, "/BiService.BiService/Economy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *biServiceClient) AddUser(ctx context.Context, in *CommonRequest, opts ...grpc.CallOption) (*CommonResponse, error) {
	out := new(CommonResponse)
	err := c.cc.Invoke(ctx, "/BiService.BiService/AddUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *biServiceClient) Quest(ctx context.Context, in *CommonRequest, opts ...grpc.CallOption) (*CommonResponse, error) {
	out := new(CommonResponse)
	err := c.cc.Invoke(ctx, "/BiService.BiService/Quest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *biServiceClient) Event(ctx context.Context, in *CommonRequest, opts ...grpc.CallOption) (*CommonResponse, error) {
	out := new(CommonResponse)
	err := c.cc.Invoke(ctx, "/BiService.BiService/Event", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *biServiceClient) Heartbeat(ctx context.Context, in *CommonRequest, opts ...grpc.CallOption) (*CommonResponse, error) {
	out := new(CommonResponse)
	err := c.cc.Invoke(ctx, "/BiService.BiService/Heartbeat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BiServiceServer is the server API for BiService service.
type BiServiceServer interface {
	// 安装 只能报送一次
	Install(context.Context, *CommonRequest) (*CommonResponse, error)
	// 启动 打开应用
	StartUp(context.Context, *CommonRequest) (*CommonResponse, error)
	// 注册
	Register(context.Context, *CommonRequest) (*CommonResponse, error)
	// 登陆
	Login(context.Context, *CommonRequest) (*CommonResponse, error)
	// 支付
	Payment(context.Context, *CommonRequest) (*CommonResponse, error)
	// 虚拟交易 经济系统
	Economy(context.Context, *CommonRequest) (*CommonResponse, error)
	// 添加用户
	AddUser(context.Context, *CommonRequest) (*CommonResponse, error)
	// 任务及副本系统
	Quest(context.Context, *CommonRequest) (*CommonResponse, error)
	// 自定义 处理 表等
	Event(context.Context, *CommonRequest) (*CommonResponse, error)
	// 心跳 在线统计
	Heartbeat(context.Context, *CommonRequest) (*CommonResponse, error)
}

// UnimplementedBiServiceServer can be embedded to have forward compatible implementations.
type UnimplementedBiServiceServer struct {
}

func (*UnimplementedBiServiceServer) Install(ctx context.Context, req *CommonRequest) (*CommonResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Install not implemented")
}
func (*UnimplementedBiServiceServer) StartUp(ctx context.Context, req *CommonRequest) (*CommonResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartUp not implemented")
}
func (*UnimplementedBiServiceServer) Register(ctx context.Context, req *CommonRequest) (*CommonResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (*UnimplementedBiServiceServer) Login(ctx context.Context, req *CommonRequest) (*CommonResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (*UnimplementedBiServiceServer) Payment(ctx context.Context, req *CommonRequest) (*CommonResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Payment not implemented")
}
func (*UnimplementedBiServiceServer) Economy(ctx context.Context, req *CommonRequest) (*CommonResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Economy not implemented")
}
func (*UnimplementedBiServiceServer) AddUser(ctx context.Context, req *CommonRequest) (*CommonResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddUser not implemented")
}
func (*UnimplementedBiServiceServer) Quest(ctx context.Context, req *CommonRequest) (*CommonResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Quest not implemented")
}
func (*UnimplementedBiServiceServer) Event(ctx context.Context, req *CommonRequest) (*CommonResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Event not implemented")
}
func (*UnimplementedBiServiceServer) Heartbeat(ctx context.Context, req *CommonRequest) (*CommonResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Heartbeat not implemented")
}

func RegisterBiServiceServer(s *grpc.Server, srv BiServiceServer) {
	s.RegisterService(&_BiService_serviceDesc, srv)
}

func _BiService_Install_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommonRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BiServiceServer).Install(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/BiService.BiService/Install",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BiServiceServer).Install(ctx, req.(*CommonRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BiService_StartUp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommonRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BiServiceServer).StartUp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/BiService.BiService/StartUp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BiServiceServer).StartUp(ctx, req.(*CommonRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BiService_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommonRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BiServiceServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/BiService.BiService/Register",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BiServiceServer).Register(ctx, req.(*CommonRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BiService_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommonRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BiServiceServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/BiService.BiService/Login",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BiServiceServer).Login(ctx, req.(*CommonRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BiService_Payment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommonRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BiServiceServer).Payment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/BiService.BiService/Payment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BiServiceServer).Payment(ctx, req.(*CommonRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BiService_Economy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommonRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BiServiceServer).Economy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/BiService.BiService/Economy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BiServiceServer).Economy(ctx, req.(*CommonRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BiService_AddUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommonRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BiServiceServer).AddUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/BiService.BiService/AddUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BiServiceServer).AddUser(ctx, req.(*CommonRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BiService_Quest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommonRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BiServiceServer).Quest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/BiService.BiService/Quest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BiServiceServer).Quest(ctx, req.(*CommonRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BiService_Event_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommonRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BiServiceServer).Event(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/BiService.BiService/Event",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BiServiceServer).Event(ctx, req.(*CommonRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BiService_Heartbeat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommonRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BiServiceServer).Heartbeat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/BiService.BiService/Heartbeat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BiServiceServer).Heartbeat(ctx, req.(*CommonRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _BiService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "BiService.BiService",
	HandlerType: (*BiServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Install",
			Handler:    _BiService_Install_Handler,
		},
		{
			MethodName: "StartUp",
			Handler:    _BiService_StartUp_Handler,
		},
		{
			MethodName: "Register",
			Handler:    _BiService_Register_Handler,
		},
		{
			MethodName: "Login",
			Handler:    _BiService_Login_Handler,
		},
		{
			MethodName: "Payment",
			Handler:    _BiService_Payment_Handler,
		},
		{
			MethodName: "Economy",
			Handler:    _BiService_Economy_Handler,
		},
		{
			MethodName: "AddUser",
			Handler:    _BiService_AddUser_Handler,
		},
		{
			MethodName: "Quest",
			Handler:    _BiService_Quest_Handler,
		},
		{
			MethodName: "Event",
			Handler:    _BiService_Event_Handler,
		},
		{
			MethodName: "Heartbeat",
			Handler:    _BiService_Heartbeat_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "BiService.proto",
}
